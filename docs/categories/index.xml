<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simon Schraeder - Personal Blog</title>
    <link>https://simon-schraeder.de/categories/</link>
    <description>Recent content on Simon Schraeder - Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jun 2018 13:45:19 +0200</lastBuildDate>
    
	<atom:link href="https://simon-schraeder.de/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuring the create-react-app ServiceWorker</title>
      <link>https://simon-schraeder.de/posts/create-react-webworker/</link>
      <pubDate>Sat, 09 Jun 2018 13:45:19 +0200</pubDate>
      
      <guid>https://simon-schraeder.de/posts/create-react-webworker/</guid>
      <description>I recently created a new React app with the create-react-app boilerplate tool by Facebook. It&amp;rsquo;s quite nice, but the ServiceWorker configuration is limited to the default output files by webpack. For my CardOnly.de website I wanted to cache the JSON data of the cards and filters as well. The process is actually not too complex:
Step 1: Eject from the default configuration To edit the webpack configuration files, we&amp;rsquo;ll need to eject by running npm run eject.</description>
    </item>
    
    <item>
      <title>Using the FileReader API in async functions</title>
      <link>https://simon-schraeder.de/posts/filereader-async/</link>
      <pubDate>Thu, 31 May 2018 12:51:20 +0200</pubDate>
      
      <guid>https://simon-schraeder.de/posts/filereader-async/</guid>
      <description>The FileReader API allows you to read files from the users&amp;rsquo; computer. Due to sandboxing of course this is mostly limited to files the user has selected in the file input fields.
The most interesting functionality is probably the .readAsArrayBuffer() function as it allows you to selectively read the file and only store part of it in memory. This allows client-side applications to process huge files without the need for huge memory.</description>
    </item>
    
  </channel>
</rss>